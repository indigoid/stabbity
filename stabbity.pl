#!/usr/bin/env perl

### John Slee <john@sleefamily.org>
### Wed 25 Dec 2013 01:42:33 EST
### Released into the public domain.

use strict;
use warnings;
use Getopt::Long;

my %CONFIG = (
	name			=> 'pgm_string_table',
);

GetOptions(\%CONFIG, qw(name=s)) or die "usage: $0 [--name=foo]\n";

my $include_guard_symbol = 'IG_' . uc($CONFIG{name}) . '_H';
my $top = qq(
/*** GENERATED BY stabbity.pl ***/
#ifndef $include_guard_symbol
#define $include_guard_symbol

#include <avr/pgmspace.h>

#define STABX_ITEM(item,content) prog_char STAB_##item [] PROGMEM = content
);

my $bottom = qq{

char STABX_buffer[STABX_LONGEST_SIZE+1];

#define STABX_GET(x) strncpy_P(STABX_buffer,(char*)pgm_read_word(&(STABX_table[x > STABX_LAST_ITEM_INDEX ? 0 : x])),STABX_LONGEST_SIZE)

#endif /* $include_guard_symbol */
};

print $top;
my @symbols;
my $longest = 0;
while (<>) {
	next if $_ =~ /^\s*#/; # skip comments
	next if $_ =~ /^\s*$/; # and blanks

	my ($symbol,$content) = $_ =~ /^([A-Za-z_][A-Za-z0-9_]+)\s+(.*)$/;
	next unless $symbol && $content && length($symbol) > 0 && length($content) > 0;
	chomp $content;
	print qq(STABX_ITEM($symbol, "$content");\n);
	push @symbols, $symbol;
	my $content_length = length($content);
	$longest = $content_length if $content_length > $longest;
}

print "\n";
print "#define STABX_LONGEST_SIZE $longest\n\n";
my $id = -1;
print map({ $id++; "#define $_ $id\n" } map { uc } @symbols), "\n";
print "#define STABX_LAST_ITEM_INDEX $id\n\n";
print "PROGMEM const char* STABX_table[] = {\n";
print map({ "\tSTAB_$_,\n"} @symbols), "};\n";

print $bottom;

